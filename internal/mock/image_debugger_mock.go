// Code generated by MockGen. DO NOT EDIT.
// Source: image_debugger.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gocv "gocv.io/x/gocv"
)

// MockImageDebuggerInterface is a mock of ImageDebuggerInterface interface.
type MockImageDebuggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockImageDebuggerInterfaceMockRecorder
}

// MockImageDebuggerInterfaceMockRecorder is the mock recorder for MockImageDebuggerInterface.
type MockImageDebuggerInterfaceMockRecorder struct {
	mock *MockImageDebuggerInterface
}

// NewMockImageDebuggerInterface creates a new mock instance.
func NewMockImageDebuggerInterface(ctrl *gomock.Controller) *MockImageDebuggerInterface {
	mock := &MockImageDebuggerInterface{ctrl: ctrl}
	mock.recorder = &MockImageDebuggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageDebuggerInterface) EXPECT() *MockImageDebuggerInterfaceMockRecorder {
	return m.recorder
}

// Show mocks base method.
func (m *MockImageDebuggerInterface) Show(mats ...*gocv.Mat) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range mats {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Show", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Show indicates an expected call of Show.
func (mr *MockImageDebuggerInterfaceMockRecorder) Show(mats ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockImageDebuggerInterface)(nil).Show), mats...)
}
