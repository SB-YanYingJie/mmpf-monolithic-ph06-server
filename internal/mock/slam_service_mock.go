// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/slam_service.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	kdslam "github.com/KudanJP/KdSlamGo/kdslam"
	gomock "github.com/golang/mock/gomock"
	model "github.com/machinemapplatform/library/model"
)

// MockSlamServiceInterface is a mock of SlamServiceInterface interface.
type MockSlamServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSlamServiceInterfaceMockRecorder
}

// MockSlamServiceInterfaceMockRecorder is the mock recorder for MockSlamServiceInterface.
type MockSlamServiceInterfaceMockRecorder struct {
	mock *MockSlamServiceInterface
}

// NewMockSlamServiceInterface creates a new mock instance.
func NewMockSlamServiceInterface(ctrl *gomock.Controller) *MockSlamServiceInterface {
	mock := &MockSlamServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSlamServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlamServiceInterface) EXPECT() *MockSlamServiceInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSlamServiceInterface) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockSlamServiceInterfaceMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSlamServiceInterface)(nil).Close), ctx)
}

// GetPoseMono mocks base method.
func (m *MockSlamServiceInterface) GetPoseMono(ctx context.Context, image []byte) (*kdslam.Pose, model.SlamState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoseMono", ctx, image)
	ret0, _ := ret[0].(*kdslam.Pose)
	ret1, _ := ret[1].(model.SlamState)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPoseMono indicates an expected call of GetPoseMono.
func (mr *MockSlamServiceInterfaceMockRecorder) GetPoseMono(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoseMono", reflect.TypeOf((*MockSlamServiceInterface)(nil).GetPoseMono), ctx, image)
}

// GetPoseStereo mocks base method.
func (m *MockSlamServiceInterface) GetPoseStereo(ctx context.Context, left, right []byte) (*kdslam.Pose, model.SlamState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoseStereo", ctx, left, right)
	ret0, _ := ret[0].(*kdslam.Pose)
	ret1, _ := ret[1].(model.SlamState)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPoseStereo indicates an expected call of GetPoseStereo.
func (mr *MockSlamServiceInterfaceMockRecorder) GetPoseStereo(ctx, left, right interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoseStereo", reflect.TypeOf((*MockSlamServiceInterface)(nil).GetPoseStereo), ctx, left, right)
}

// Start mocks base method.
func (m *MockSlamServiceInterface) Start(ctx context.Context) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Start indicates an expected call of Start.
func (mr *MockSlamServiceInterfaceMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSlamServiceInterface)(nil).Start), ctx)
}
